
state 0
	$accept: .translation_unit $end 

	INT_LITERAL  shift 17
	DOUBLE_LITERAL  shift 18
	STRING_LITERAL  shift 32
	IDENTIFIER  shift 19
	FUNCTION  shift 20
	IF  shift 21
	ELSE  shift 22
	ELSIF  shift 23
	WHILE  shift 24
	FOR  shift 25
	RETURN_T  shift 26
	BREAK  shift 27
	CONTINUE  shift 28
	ASSIGN  shift 10
	LOGICAL_AND  shift 8
	LOGICAL_OR  shift 9
	EQ  shift 11
	NE  shift 12
	GT  shift 13
	GE  shift 14
	LT  shift 15
	LE  shift 16
	ADD  shift 3
	SUB  shift 4
	MUL  shift 5
	DIV  shift 6
	MOD  shift 7
	TRUE_T  shift 29
	FALSE_T  shift 30
	GLOBAL_T  shift 31
	.  error

	translation_unit  goto 1
	additive  goto 2

state 1
	$accept:  translation_unit.$end 
	translation_unit:  translation_unit.additive 

	$end  accept
	INT_LITERAL  shift 17
	DOUBLE_LITERAL  shift 18
	STRING_LITERAL  shift 32
	IDENTIFIER  shift 19
	FUNCTION  shift 20
	IF  shift 21
	ELSE  shift 22
	ELSIF  shift 23
	WHILE  shift 24
	FOR  shift 25
	RETURN_T  shift 26
	BREAK  shift 27
	CONTINUE  shift 28
	ASSIGN  shift 10
	LOGICAL_AND  shift 8
	LOGICAL_OR  shift 9
	EQ  shift 11
	NE  shift 12
	GT  shift 13
	GE  shift 14
	LT  shift 15
	LE  shift 16
	ADD  shift 3
	SUB  shift 4
	MUL  shift 5
	DIV  shift 6
	MOD  shift 7
	TRUE_T  shift 29
	FALSE_T  shift 30
	GLOBAL_T  shift 31
	.  error

	additive  goto 33

state 2
	translation_unit:  additive.    (1)

	.  reduce 1 (src line 20)


state 3
	additive:  ADD.    (3)

	.  reduce 3 (src line 24)


state 4
	additive:  SUB.    (4)

	.  reduce 4 (src line 29)


state 5
	additive:  MUL.    (5)

	.  reduce 5 (src line 33)


state 6
	additive:  DIV.    (6)

	.  reduce 6 (src line 37)


state 7
	additive:  MOD.    (7)

	.  reduce 7 (src line 41)


state 8
	additive:  LOGICAL_AND.    (8)

	.  reduce 8 (src line 45)


state 9
	additive:  LOGICAL_OR.    (9)

	.  reduce 9 (src line 49)


state 10
	additive:  ASSIGN.    (10)

	.  reduce 10 (src line 53)


state 11
	additive:  EQ.    (11)

	.  reduce 11 (src line 57)


state 12
	additive:  NE.    (12)

	.  reduce 12 (src line 61)


state 13
	additive:  GT.    (13)

	.  reduce 13 (src line 65)


state 14
	additive:  GE.    (14)

	.  reduce 14 (src line 69)


state 15
	additive:  LT.    (15)

	.  reduce 15 (src line 73)


state 16
	additive:  LE.    (16)

	.  reduce 16 (src line 77)


state 17
	additive:  INT_LITERAL.    (17)

	.  reduce 17 (src line 81)


state 18
	additive:  DOUBLE_LITERAL.    (18)

	.  reduce 18 (src line 85)


state 19
	additive:  IDENTIFIER.    (19)

	.  reduce 19 (src line 89)


state 20
	additive:  FUNCTION.    (20)

	.  reduce 20 (src line 93)


state 21
	additive:  IF.    (21)

	.  reduce 21 (src line 97)


state 22
	additive:  ELSE.    (22)

	.  reduce 22 (src line 101)


state 23
	additive:  ELSIF.    (23)

	.  reduce 23 (src line 105)


state 24
	additive:  WHILE.    (24)

	.  reduce 24 (src line 109)


state 25
	additive:  FOR.    (25)

	.  reduce 25 (src line 113)


state 26
	additive:  RETURN_T.    (26)

	.  reduce 26 (src line 117)


state 27
	additive:  BREAK.    (27)

	.  reduce 27 (src line 121)


state 28
	additive:  CONTINUE.    (28)

	.  reduce 28 (src line 125)


state 29
	additive:  TRUE_T.    (29)

	.  reduce 29 (src line 129)


state 30
	additive:  FALSE_T.    (30)

	.  reduce 30 (src line 133)


state 31
	additive:  GLOBAL_T.    (31)

	.  reduce 31 (src line 137)


state 32
	additive:  STRING_LITERAL.    (32)

	.  reduce 32 (src line 141)


state 33
	translation_unit:  translation_unit additive.    (2)

	.  reduce 2 (src line 22)


40 terminals, 3 nonterminals
33 grammar rules, 34/2000 states
0 shift/reduce, 0 reduce/reduce conflicts reported
52 working sets used
memory: parser 2/30000
0 extra closures
60 shift entries, 1 exceptions
3 goto entries
0 entries saved by goto default
Optimizer space used: output 37/30000
37 table entries, 4 zero
maximum spread: 40, maximum offset: 4
